{"version":3,"sources":["api/fetchWeather.js","App.js","index.js"],"names":["fetchWeather","query","a","axios","get","params","q","units","APPID","data","App","useState","setQuery","weather","setweather","search","e","key","console","log","className","type","placeholder","value","onChange","target","onKeyPress","main","name","sys","country","Math","round","temp","src","icon","alt","description","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SAKaA,EAAY,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACDC,IAAMC,IAJrB,kDAI8B,CAClCC,OAAQ,CACJC,EAAGL,EACHM,MAAO,SACPC,MAPI,sCAEY,uBAChBC,EADgB,EAChBA,KADgB,kBASjBA,GATiB,2CAAH,sD,MCsCVC,MAvCf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNV,EADM,KACCW,EADD,OAEiBD,mBAAS,IAF1B,mBAENE,EAFM,KAEGC,EAFH,KAIPC,EAAM,uCAAG,WAAOC,GAAP,eAAAd,EAAA,yDACA,UAAVc,EAAEC,IADQ,gCAEQjB,EAAaC,GAFrB,OAELQ,EAFK,OAGXS,QAAQC,IAAIV,GACZK,EAAWL,GACXG,EAAS,IALE,2CAAH,sDASZ,OACE,yBAAKQ,UAAU,kBACb,2BAAOC,KAAK,OAAOD,UAAU,SAASE,YAAY,YAC3CC,MAAOtB,EAAOuB,SAAU,SAACR,GAAD,OAAOJ,EAASI,EAAES,OAAOF,QACjDG,WAAYX,IAClBF,EAAQc,MACP,yBAAKP,UAAU,QACb,wBAAIA,UAAU,aACZ,8BAAOP,EAAQe,MACf,6BAAMf,EAAQgB,IAAIC,UAEpB,yBAAKV,UAAU,aACZW,KAAKC,MAAMnB,EAAQc,KAAKM,MACzB,uCAEF,yBAAKb,UAAU,QACb,yBAAKA,UAAU,YAAYc,IAAG,4CAAuCrB,EAAQA,QAAQ,GAAGsB,KAA1D,WACHC,IAAKvB,EAAQA,QAAQ,GAAGwB,cACnD,2BAAIxB,EAAQA,QAAQ,GAAGwB,iBC7BnCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.1ad9f835.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst URL = 'https://api.openweathermap.org/data/2.5/weather';\r\nconst API_KEY = 'b9cefad87d6e92471564b705be6369b8';\r\n\r\nexport const fetchWeather = async (query) => {\r\n    const { data } = await axios.get(URL, {\r\n        params: {\r\n            q: query,\r\n            units: 'metric',\r\n            APPID: API_KEY\r\n        }\r\n    })\r\n\r\n    return data;\r\n}\r\n\r\n","import React, { useState } from 'react';\nimport { fetchWeather } from './api/fetchWeather';\nimport './App.css';\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setweather] = useState('');\n  \n  const search = async (e) => {\n    if(e.key === 'Enter'){\n      const data = await fetchWeather(query);\n      console.log(data);\n      setweather(data);\n      setQuery('');\n    }\n  }\n\n  return (\n    <div className=\"main-container\">\n      <input type=\"text\" className=\"search\" placeholder=\"search...\" \n             value={query} onChange={(e) => setQuery(e.target.value)}\n             onKeyPress={search} />\n      {weather.main && (\n        <div className=\"city\">\n          <h2 className=\"city-name\">\n            <span>{weather.name}</span>\n            <sup>{weather.sys.country}</sup>\n          </h2>\n          <div className=\"city-temp\">\n            {Math.round(weather.main.temp)}\n            <sup>&deg;C</sup>\n          </div>\n          <div className=\"info\">\n            <img className=\"city-icon\" src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} \n                                       alt={weather.weather[0].description} />\n            <p>{weather.weather[0].description}</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}